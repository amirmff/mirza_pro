<?php
/**
 * Initial Setup Wizard
 * First-time configuration interface
 */

session_start();
// Buffer all output to keep headers safe
if (ob_get_level() === 0) { ob_start(); }

// Check if already configured
$setup_flag = __DIR__ . '/.needs_setup';
if (!file_exists($setup_flag)) {
    while (ob_get_level() > 0) { ob_end_clean(); }
    header('Location: /webpanel/login.php');
    exit;
}

$error = '';
$step = $_GET['step'] ?? 1;

// Process form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if ($step == 1) {
        // Database configuration
        $_SESSION['db_host'] = $_POST['db_host'] ?? 'localhost';
        $_SESSION['db_name'] = $_POST['db_name'] ?? '';
        $_SESSION['db_user'] = $_POST['db_user'] ?? '';
        $_SESSION['db_pass'] = $_POST['db_pass'] ?? '';
        
        // Test connection
        try {
            $pdo = new PDO(
                "mysql:host={$_SESSION['db_host']};dbname={$_SESSION['db_name']};charset=utf8mb4",
                $_SESSION['db_user'],
                $_SESSION['db_pass'],
                [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
            );
            header('Location: ?step=2');
            exit;
        } catch (PDOException $e) {
            $error = 'Database connection failed: ' . $e->getMessage();
        }
        
    } elseif ($step == 2) {
        // Bot configuration
        $_SESSION['bot_token'] = $_POST['bot_token'] ?? '';
        $_SESSION['admin_id'] = $_POST['admin_id'] ?? '';
        $_SESSION['admin_username'] = $_POST['admin_username'] ?? 'admin';
        $_SESSION['admin_password'] = $_POST['admin_password'] ?? '';
        $_SESSION['domain'] = $_POST['domain'] ?? '';
        
        if (empty($_SESSION['bot_token']) || empty($_SESSION['admin_id']) || empty($_SESSION['admin_password'])) {
            $error = 'Please fill all required fields';
        } else {
            header('Location: ?step=3');
            exit;
        }
        
    } elseif ($step == 3) {
        // Final step - apply configuration
        try {
            // Build config.php via template to avoid escaping issues
            $template = <<<'PHP'
<?php
// Generated by setup wizard
$dbname = '__DB_NAME__';
$usernamedb = '__DB_USER__';
$passworddb = '__DB_PASS__';
$dbhost = '__DB_HOST__';

$connect = mysqli_connect("__DB_HOST__", $usernamedb, $passworddb, $dbname);
if (!$connect || $connect->connect_error) { die("Database connection error."); }
mysqli_set_charset($connect, "utf8mb4");

$options = [ PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, PDO::ATTR_EMULATE_PREPARES => false, ];
$dsn = "mysql:host=__DB_HOST__;dbname=$dbname;charset=utf8mb4";
try { $pdo = new PDO($dsn, $usernamedb, $passworddb, $options); } catch (\PDOException $e) { error_log("Database connection failed: " . $e->getMessage()); die("PDO connection error."); }

$APIKEY = '__API_KEY__';
$adminnumber = '__ADMIN_ID__';
$domainhosts = '__DOMAIN__';
$usernamebot = '';

$new_marzban = true;
?>
PHP;
            $repl = [
                '__DB_NAME__' => addslashes($_SESSION['db_name']),
                '__DB_USER__' => addslashes($_SESSION['db_user']),
                '__DB_PASS__' => addslashes($_SESSION['db_pass']),
                '__DB_HOST__' => addslashes($_SESSION['db_host'] ?? 'localhost'),
                '__API_KEY__' => addslashes($_SESSION['bot_token']),
                '__ADMIN_ID__' => addslashes($_SESSION['admin_id']),
                '__DOMAIN__'  => addslashes($_SESSION['domain']),
            ];
            $config_content = strtr($template, $repl);
            file_put_contents(__DIR__ . '/../config.php', $config_content);
            // Persist bot token for future updates fallback
            @file_put_contents(__DIR__ . '/.bot_token', $_SESSION['bot_token']);
            
            // Connect to database
            $pdo = new PDO(
                "mysql:host={$_SESSION['db_host']};dbname={$_SESSION['db_name']};charset=utf8mb4",
                $_SESSION['db_user'],
                $_SESSION['db_pass'],
                [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
            );
            
            // Import database schema if exists
            $sql_file = __DIR__ . '/../database/schema.sql';
            if (file_exists($sql_file)) {
                $sql = file_get_contents($sql_file);
                if ($sql) { $pdo->exec($sql); }
            }
            
            // Ensure admin table (normalized columns)
            $pdo->exec("CREATE TABLE IF NOT EXISTS `admin` (
                `id_admin` INT(11) NOT NULL AUTO_INCREMENT,
                `username` VARCHAR(255) NOT NULL,
                `password` VARCHAR(255) NOT NULL,
                `rule` VARCHAR(50) NOT NULL DEFAULT 'administrator',
                `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (`id_admin`),
                UNIQUE KEY `username` (`username`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci");
            
            // Attempt to run table.php silently to create any missing tables
            $table_file = __DIR__ . '/../table.php';
            if (file_exists($table_file)) {
                // Prefer CLI to fully isolate output
                $phpbin = trim(shell_exec('command -v php 2>/dev/null') ?? '');
                if ($phpbin !== '') {
                    @shell_exec(escapeshellcmd($phpbin) . ' ' . escapeshellarg($table_file) . ' >/dev/null 2>&1');
                } else {
                    $lvl = ob_get_level();
                    ob_start();
                    @require_once $table_file;
                    while (ob_get_level() > $lvl) { ob_end_clean(); }
                }
            }
            
            // Create/Update admin user (support legacy columns)
            $hashed_password = password_hash($_SESSION['admin_password'], PASSWORD_BCRYPT);
            $cols = $pdo->query("SHOW COLUMNS FROM admin")->fetchAll(PDO::FETCH_COLUMN, 0);
            $hasNormalized = in_array('username', $cols) && in_array('password', $cols);
            $hasLegacy    = in_array('username_admin', $cols) && in_array('password_admin', $cols);
            // Build dynamic insert covering both normalized and legacy columns
            $fields = ['id_admin' => ':id', 'rule' => "'administrator'"];
            $params = [':id' => $_SESSION['admin_id']];
            $updates = [];
            if (in_array('username', $cols)) {
                $fields['username'] = ':u_norm';
                $params[':u_norm'] = $_SESSION['admin_username'];
                $updates[] = "username = VALUES(username)";
            }
            if (in_array('password', $cols)) {
                $fields['password'] = ':p_norm';
                $params[':p_norm'] = $hashed_password;
                $updates[] = "password = VALUES(password)";
            }
            if (in_array('username_admin', $cols)) {
                $fields['username_admin'] = ':u_legacy';
                $params[':u_legacy'] = $_SESSION['admin_username'];
                $updates[] = "username_admin = VALUES(username_admin)";
            }
            if (in_array('password_admin', $cols)) {
                // Keep legacy plain text to match existing logic
                $fields['password_admin'] = ':p_legacy';
                $params[':p_legacy'] = $_SESSION['admin_password'];
                $updates[] = "password_admin = VALUES(password_admin)";
            }
            if (empty($updates)) {
                throw new Exception('Admin table schema is missing expected columns.');
            }
            // Always include rule in updates if present
            if (in_array('rule', $cols)) { $updates[] = "rule = VALUES(rule)"; }
            $columnsSql = implode(', ', array_keys($fields));
            $valuesSql = implode(', ', array_values($fields));
            $updateSql = implode(', ', $updates);
            $sql = "INSERT INTO admin ($columnsSql) VALUES ($valuesSql) ON DUPLICATE KEY UPDATE $updateSql";
            $stmt = $pdo->prepare($sql);
            $stmt->execute($params);
            
            // Set webhook
            $webhook_url = !empty($_SESSION['domain']) ? 
                "https://{$_SESSION['domain']}/webhooks.php" : 
                (isset($_SERVER['SERVER_ADDR']) ? "http://{$_SERVER['SERVER_ADDR']}/webhooks.php" : '');
            if (!empty($webhook_url)) {
                $ch = curl_init("https://api.telegram.org/bot{$_SESSION['bot_token']}/setWebhook");
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POST, true);
                curl_setopt($ch, CURLOPT_POSTFIELDS, ['url' => $webhook_url]);
                curl_exec($ch);
                curl_close($ch);
            }
            
            // Remove setup flag
            @unlink($setup_flag);
            
            // Clear session and buffers, then redirect
            session_destroy();
            while (ob_get_level() > 0) { ob_end_clean(); }
            header('Location: /webpanel/login.php?setup_complete=1');
            exit;
            
        } catch (Exception $e) {
            $error = 'Configuration failed: ' . $e->getMessage();
        }
    }
}

// Load saved DB credentials if available (created by installer)
$db_creds_file = __DIR__ . '/.db_credentials.json';
if ($step == 1 && file_exists($db_creds_file)) {
    $creds_json = file_get_contents($db_creds_file);
    $creds = json_decode($creds_json, true);
    if ($creds) {
        $_SESSION['db_host'] = $creds['db_host'] ?? 'localhost';
        $_SESSION['db_name'] = $creds['db_name'] ?? '';
        $_SESSION['db_user'] = $creds['db_user'] ?? '';
        $_SESSION['db_pass'] = $creds['db_password'] ?? '';
    }
}
?>
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>راه‌اندازی اولیه - Mirza Pro</title>
    <link rel="stylesheet" href="/webpanel/assets/css/style.css">
    <style>
        .setup-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }
        .setup-box {
            background: white;
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            width: 100%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        .setup-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 40px;
        }
        .step {
            flex: 1;
            text-align: center;
            padding: 10px;
            border-bottom: 3px solid #ecf0f1;
            position: relative;
        }
        .step.active {
            border-bottom-color: #667eea;
            color: #667eea;
            font-weight: bold;
        }
        .step.completed {
            border-bottom-color: #27ae60;
        }
    </style>
</head>
<body>
    <div class="setup-container">
        <div class="setup-box">
            <h1 style="text-align: center; margin-bottom: 10px;">🚀 Mirza Pro</h1>
            <p style="text-align: center; color: #666; margin-bottom: 30px;">راه‌اندازی اولیه سیستم</p>
            
            <div class="setup-steps">
                <div class="step <?php echo $step >= 1 ? 'active' : ''; ?> <?php echo $step > 1 ? 'completed' : ''; ?>">
                    1. پایگاه داده
                </div>
                <div class="step <?php echo $step >= 2 ? 'active' : ''; ?> <?php echo $step > 2 ? 'completed' : ''; ?>">
                    2. ربات تلگرام
                </div>
                <div class="step <?php echo $step >= 3 ? 'active' : ''; ?>">
                    3. تکمیل
                </div>
            </div>
            
            <?php if ($error): ?>
            <div class="error-message" style="background: #fee; border: 1px solid #fcc; color: #c33; padding: 12px; border-radius: 8px; margin-bottom: 20px;">
                <?php echo htmlspecialchars($error); ?>
            </div>
            <?php endif; ?>
            
            <form method="POST">
                <?php if ($step == 1): ?>
                    <h2>تنظیمات پایگاه داده</h2>
                    <p style="color: #666; margin-bottom: 20px;">اطلاعات MySQL را وارد کنید</p>
                    
                    <div class="form-group">
                        <label>نام پایگاه داده</label>
                        <input type="text" name="db_name" class="form-control" value="<?php echo htmlspecialchars($_SESSION['db_name'] ?? ''); ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label>نام کاربری</label>
                        <input type="text" name="db_user" class="form-control" value="<?php echo htmlspecialchars($_SESSION['db_user'] ?? ''); ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label>رمز عبور</label>
                        <input type="password" name="db_pass" class="form-control" value="<?php echo htmlspecialchars($_SESSION['db_pass'] ?? ''); ?>" required>
                    </div>
                    
                    <input type="hidden" name="db_host" value="localhost">
                    
                    <button type="submit" class="btn btn-primary" style="width: 100%;">مرحله بعد</button>
                    
                <?php elseif ($step == 2): ?>
                    <h2>تنظیمات ربات تلگرام</h2>
                    <p style="color: #666; margin-bottom: 20px;">اطلاعات ربات را از @BotFather دریافت کنید</p>
                    
                    <div class="form-group">
                        <label>توکن ربات *</label>
                        <input type="text" name="bot_token" class="form-control" placeholder="123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11" required>
                        <small style="color: #666;">از @BotFather دریافت کنید</small>
                    </div>
                    
                    <div class="form-group">
                        <label>آیدی عددی ادمین *</label>
                        <input type="text" name="admin_id" class="form-control" placeholder="123456789" required>
                        <small style="color: #666;">از @userinfobot دریافت کنید</small>
                    </div>
                    
                    <div class="form-group">
                        <label>نام کاربری ادمین پنل</label>
                        <input type="text" name="admin_username" class="form-control" value="admin" required>
                    </div>
                    
                    <div class="form-group">
                        <label>رمز عبور پنل مدیریت *</label>
                        <input type="password" name="admin_password" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label>دامنه (اختیاری)</label>
                        <input type="text" name="domain" class="form-control" placeholder="bot.example.com">
                        <small style="color: #666;">برای تنظیم بعدی SSL لازم است</small>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" style="width: 100%;">اتمام راه‌اندازی</button>
                    
                <?php elseif ($step == 3): ?>
                    <div style="text-align: center;">
                        <div style="font-size: 64px; margin-bottom: 20px;">⚙️</div>
                        <h2>در حال تکمیل راه‌اندازی...</h2>
                        <p>لطفا صبر کنید</p>
                    </div>
                    <script>
                        setTimeout(function() {
                            document.querySelector('form').submit();
                        }, 1000);
                    </script>
                <?php endif; ?>
            </form>
        </div>
    </div>
</body>
</html>
